struct exp {
	pthread_barrier_t	barrier;
	double 			data[1000000];
} data;

int main( int argc, char **argv ) {
	int  i, ntasks, pipid;
	void *export = (void*) &data;

	ntasks = 10;
	pthread_barrier_init( &data->barrier, N+1 );
	pip_init( &pipid, &ntasks, (void*) &export, 0 );
  	if( pipid == PIP_PIPID_ROOT ) {
		for( i=0; i<ntasks; i++ ) {
			pipid = i;
			pip_spawn( argv[0], argv, NULL, 
				i%ncores, &pipid, 
				NULL, NULL, NULL );
		}
		pthread_barrier_wait( &data.barrier );
		for( i=0; i<ntasks; i++ ) {
			void *import;
			pip_import( i, &import );
			/* gather individual result */
		}
		pthread_barrier_wait( &data.barrier );
		for( i=0; i<ntasks; i++ ) pip_wait( i, NULL );
	} else {	/* PIP child task */
		int start, end;
		struct data* import = (struct exp*) export;
		double *input = import->data;
		double output;

		start = ( 1000000 / ntasks ) * pipid;
		end = start + ( 1000000 / ntasks );
      		for( i=start; i<end; i++ ) {
			/* do computation on imported data */
		}
		pip_export( (void*) &output );
		pthread_barrier_wait( &export->barrier );
		 /* here, the main task gathers child data */
		pthread_barrier_wait( &export->barrier );
	}
	pip_fin();
	return 0;
}
