.TH "pip_spawn" 3 "Wed Jul 1 2020" "PiP - Process-in-Process" \" -*- nroff -*-
.ad l
.nh
.SH NAME
pip_spawn \- pip_spawn 
spawn a PiP task (PiP v1 API and deprecated)
.PP
\fBSynopsis:\fP
.RS 4
#include <\fBpip\&.h\fP> int pip_spawn( char *filename, char **argv, char **envv, uint32_t coreno, int *pipidp, pip_spawnhook_t before, pip_spawnhook_t after, void *hookarg);
.RE
.PP
\fBDescription:\fP
.RS 4
This function spawns a PiP task\&.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIfilename\fP The executable to run as a PiP task 
.br
\fIargv\fP Argument(s) for the spawned PiP task 
.br
\fIenvv\fP Environment variables for the spawned PiP task 
.br
\fIcoreno\fP Core number for the PiP task to be bound to\&. If \fCPIP_CPUCORE_ASIS\fP is specified, then the core binding will not take place\&. 
.br
\fIpipidp\fP Specify PiP ID of the spawned PiP task\&. If \fCPIP_PIPID_ANY\fP is specified, then the PiP ID of the spawned PiP task is up to the PiP library and the assigned PiP ID will be returned\&. 
.br
\fIbefore\fP Just before the executing of the spawned PiP task, this function is called so that file descriptors inherited from the PiP root, for example, can deal with\&. This is only effective with the PiP process mode\&. This function is called with the argument \fIhookarg\fP described below\&. 
.br
\fIafter\fP This function is called when the PiP task terminates for the cleanup purpose\&. This function is called with the argument \fIhookarg\fP described below\&. 
.br
\fIhookarg\fP The argument for the \fIbefore\fP and \fIafter\fP function call\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Return 0 on success\&. Return an error code on error\&. 
.RE
.PP

