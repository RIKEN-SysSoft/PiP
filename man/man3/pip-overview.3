.TH "pip-overview" 3 "Thu May 30 2019" "PiP - Process-in-Process" \" -*- nroff -*-
.ad l
.nh
.SH NAME
pip-overview \- 
the PiP library  
the PiP library 


.SH "Overview"
.PP
PiP is a user-level library which allows a process to create sub-processes into the same virtual address space where the parent process runs\&. The parent process and sub-processes share the same address space, however, each process has its own variables\&. So, each process runs independently from the other process\&. If some or all processes agreed, then data own by a process can be accessed by the other processes\&.
.PP
Those processes share the same address space, just like pthreads, and each process has its own variables like a process\&. The parent process is called \fIPiP\fP \fIprocess\fP and sub-processes are called \fIPiP\fP \fItask\fP since it has the best of the both worlds of processes and pthreads\&.
.PP
PiP root can spawn one or more number of PiP tasks\&. The PiP root and PiP tasks shared the same address space\&. The executable of the PiP task must be compiled (with the '-fpie' compile option) and linked (with the '-pie' linker option) as PIE (Position Independent Executable)\&.
.PP
When a PiP root or PiP task wants to be accessed the its own data by the other(s), firstly a memory region where the data to be accessed are located must be \fIexported\fP\&. Then the exported memory region is \fIimported\fP so that the exported and imported data can be accessed\&. The PiP library supports the functions to export and import the memory region to be accessible\&.
.SH "User-Level Process (ULP)"
.PP
PiP also supports ULPs which are explicitly scheduled by PiP tasks\&. Unlike the other user-level thread libraries, PiP ULPs can run with different programs\&. Due to the GLIBC constraints, ULPs can be created by the PiP root process\&. The created ULPs are associated with a PiP task by specifying ULPs when the task is created by calling \fB\fBpip_task_spawn()\fP\fP\&. A ULP can yield, suspend, and resume its execution by calling PiP ULP functions\&. A PiP task will be terminated only when all ULPs scheduled by the task terminate\&.
.SH "Execution mode"
.PP
There are several PiP implementation modes which can be selected at the runtime\&. These implementations can be categorized into two according to the behavior of PiP tasks,
.PP
.IP "\(bu" 2
\fCPthread\fP, and
.IP "\(bu" 2
\fCProcess\fP\&.
.PP
.PP
In the pthread mode, although each PiP task has its own variables unlike thread, PiP task behaves more like Pthread, having a TID, having the same file descriptor space, having the same signal delivery semantics as Pthread does, and so on\&. In the process mode, PiP task behaves more like a process, having a PID, having an independent file descriptor space, having the same signal delivery semantics as Linux process does, and so on\&.
.PP
When the \fCPIP_MODE\fP environment variable set to "thread" then the PiP library runs based on the pthread mode, and it is set to "process" then it runs with the process mode\&. There are also two implementations in the \fBprocess\fP mode; "process:preload" and "process:pipclone" The former one must be with the \fBLD_PRELOAD\fP environment variable setting so that the \fBclone()\fP system call wrapper can work with\&. The latter one can only be specified with the PIP-patched glibc library (see below: \fBGLIBC\fP issues)\&.
.PP
There several function provided by the PiP library to absorb the difference due to the execution mode
.SH "Limitation"
.PP
PiP allows PiP root and PiP tasks to share the data, so the function pointer can be passed to the others\&. However, jumping into the code owned by the other may not work properly for some reasons\&.
.SH "Compile and Link User programs"
.PP
The PiP root ust be linked with the PiP library and libpthread\&. The programs able to run as a PiP task must be compiled with the "-fpie" compile option and the "-pie -rdynamic" linker options\&.
.SH "GLIBC issues"
.PP
The PiP library is implemented at the user-level, i\&.e\&. no need of kernel patches nor kernel modules\&. Due to the novel usage of combining \fCdlmopn()\fP GLIBC function and \fCclone()\fP systemcall, there are some issues found in the GLIBC\&. To avoid this issues, PiP users may have the patched GLIBC provided by the PiP development team\&.
.SH "GDB issue"
.PP
The normal gdb debugger only works with the PiP root\&. PiP-aware GDB is also provided and must be used for debugging PiP tasks\&.
.SH "Author"
.PP
Atsushi Hori (RIKEN, Japan) ahori@riken.jp 
.SH "Author"
.PP 
Generated automatically by Doxygen for PiP - Process-in-Process from the source code\&.
