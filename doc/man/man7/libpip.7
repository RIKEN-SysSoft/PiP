.TH "libpip" 7 "Wed Nov 18 2020" "Process-in-Process" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libpip \- libpip 

.SH "Process-in-Process (PiP)"
.PP
.PP
PiP is a user-level library to have the best of the both worlds of multi-process and multi-thread parallel execution models\&. PiP allows a process to create sub-processes into the same virtual address space where the parent process runs\&. The parent process and sub-processes share the same address space, however, each process has its own variable set\&. So, each process runs independently from the other process\&. If some or all processes agree, then data owned by a process can be accessed by the other processes\&. Those processes share the same address space, just like pthreads, but each process has its own variables like the process execution model\&. Hereinafter, the parent process is called PiP process and a sub-process are called a PiP task\&.
.PP
.SS "PiP Versions"
.PP
Currently there are three PiP library versions:
.PP
.IP "\(bu" 2
Version 1 - Deprecated
.IP "\(bu" 2
Version 2 - Stable version
.IP "\(bu" 2
Version 3 - Stable version supporting BLT and ULP (experimental)
.PP
.PP
Unfortunately each version has unique ABI and there is no ABI compatibility among them\&. The functionality of PiP-v1 is almost the same with PiP-v2, however, PiP-v2's API is a subset of the PiP-v3's API\&. Hereafter \fBNN\fP denotes the PiP version number\&.
.PP
.SS "Bi-Level Thread (BLT, from v3)"
.PP
PiP also provides new thread implementation named 'Bi-Level Thread
(BLT)', again, to take the best of two worlds, Kernel-Level Thread (KLT) and User-Level Thread (ULT) here\&. A BLT is a PiP task\&. When a PiP task is created it runs as a KLT\&. At any point the KLT can becomme a ULT by decoupling the associated kernel thread from the KLT\&. The decoupled kernel thread becommes idle\&. Later, the ULT can become KLT again by coupling with the kernel thread\&.
.PP
.SS "User-Level Process (ULP, from v3)"
.PP
As described, PiP allows PiP tasks to share the same virtual address space\&. This mans that a PiP task can context-switch to the other PiP task at user-level\&. This is called User-Level Process where processes may be derived from the same program or different programs\&. Threads basically share most of the kernel resources, such as address space, file descriptors, a process id, and so on whilst processes do not\&. Every process has its ows file descriptor space, for example\&. When a ULP is scheduled by a KLT having PID 1000, then the getpid() is called by the ULP returns 1000\&. Further, when the ULT is migrated to be scheduled by the other KLT, then the returned PID is different\&. So, when implemnting a ULP system, this systemcall consistency must be preserved\&. In ULP on PiP, the consistency can be maintained by utilizing the above BLT mechanism\&. When a ULT tries to call a system call, it is coupled with its kernel thread which was created at the beginning as a KLT\&. It should be note that Thread Local Storage (TLS) regions are also switched when switching ULP (and BLT) contexts\&.
.PP
.SS "Execution Mode"
.PP
There are several PiP implementation modes which can be selected at the runtime\&. These implementations can be categorized into two;
.PP
.IP "\(bu" 2
Process and
.IP "\(bu" 2
(P)Thread\&.
.PP
.PP
In the pthread mode, although each PiP task has its own static variables unlike thread, PiP task behaves more like PThread, having a TID, having the same file descriptor space, having the same signal delivery semantics as Pthread does, and so on\&. In the process mode, a PiP task behaves more like a process, having a PID, having an independent file descriptor space, having the same signal delivery semantics as Linux process does, and so on\&. The above mentioned ULP can only work with the process mode\&.
.PP
When the \fBPIP_MODE\fP environment variable set to '()thread' then the PiP library runs in the pthread mode, and if it is set to 'process' then it runs in the process mode\&. There are also three implementations in the process mode; 'process:preload,' 'process:pipclone' and 'process:got\&.' The 'process:preload' mode must be with the \fBLD_PRELOAD\fP environment variable setting so that the clone() system call wrapper can work with\&. The 'process:pipclone' mode is only effective with the PIP-patched glibc library (see below)\&.
.PP
Several function are made available by the PiP library to absorb the functional differences due to the execution modes\&.
.PP
.SH "License"
.PP
.PP
This package is licensed under the 2-clause simplified BSD License - see the [LICENSE](LICENSE) file for details\&.
.PP
.SH "Installation"
.PP
.PP
Basically PiP requires the following three software packages;
.PP
.IP "\(bu" 2
\fCPiP-glibc\fP - patched GNU libc for PiP
.IP "\(bu" 2
\fCPiP\fP - Process in Process (this package)
.IP "\(bu" 2
\fCPiP-gdb\fP - patched gdb to debug PiP root and PiP tasks\&.
.PP
.PP
By using PiP-glibc, users can create up to 300 PiP tasks which can be dbugged by using PiP-gdb\&. In other words, without installing PiP-glibc, users can create up to around 10 PiP tasks (the number depends on the program) and cannot debug by using PiP-gdb\&.
.PP
There are several ways to install the PiP packages; Yum (RPM), Docker, Spack, and building from the source code\&. It is strongly recommended to use the following PiP package installation program (pip-pip):
.PP
.IP "\(bu" 2
\fCPiP-pip\fP - PiP package installing program
.PP
.PP
This is the easiest way to install PiP packages in any form\&. Here is the example of \fCpip-pip\fP usage: 
.PP
.nf
$ git clone https://github.com/RIKEN-SysSoft/PiP-pip.git
$ cd PiP-pip
$ ./pip-pip --how=HOW --pip=PIP_VERSION --work=BUILD_DIR --prefix=INSTALL_DIR

.fi
.PP
.PP
\fBHOW\fP can be one of \fCyum\fP, \fCdocker\fP, \fCspack\fP and \fCgithub\fP, or any combination of them\&. \fCpip-pip --help\fP will show you how to use the program\&. \fCyum\fP, \fCdocker\fP and \fCspack\fP include all three packages; PiP-glibc, PiP-lib, and PiP-gdb\&.
.PP
.SH "PiP Documents"
.PP
.PP
The following PiP documents are created by using \fCDoxygen\fP\&.
.PP
.SS "Man pages"
.PP
Man pages will be installed at \fBPIP_INSTALL_DIR\fP/share/man\&. 
.PP
.nf
$ man -M PIP_INSTALL_DIR/share/man 7 libpip

.fi
.PP
.PP
Or, use the pip-man command (from v2)\&. 
.PP
.nf
$ PIP_INSTALL_DIR/bin/pip-man 7 libpip

.fi
.PP
.PP
The above two exammples will show you the same document you are reading\&.
.PP
.SS "PDF"
.PP
\fCPDF documents\fP will be installed at \fBPIP_INSTALL_DIR\fP/share/pdf\&.
.PP
.SS "HTML"
.PP
\fCHTML documents\fP will be installed at \fBPIP_INSTALL_DIR\fP/share/html\&.
.PP
.SH "Getting Started"
.PP
.PP
.SS "Compile and link your PiP programs"
.PP
.IP "\(bu" 2
pipcc(1) command (since v2)
.PP
.PP
You can use pipcc(1) command to compile and link your PiP programs\&. 
.PP
.nf
$ pipcc -Wall -O2 -g -c pip-prog.c
$ pipcc -Wall -O2 -g -o pip-prog pip-prog.c

.fi
.PP
.PP
.SS "Run your PiP programs"
.PP
.IP "\(bu" 2
pip-exec(1) command (piprun(1) in PiP v1)
.PP
.PP
Let's assume that you have a non-PiP program(s) and wnat to run as PiP tasks\&. All you have to do is to compile your program by using the above pipcc(1) command and to use the pip-exec(1) command to run your program as PiP tasks\&. 
.PP
.nf
$ pipcc myprog.c -o myprog
$ pip-exec -n 8 ./myprog
$ ./myprog

.fi
.PP
.PP
In this case, the pip-exec(1) command becomes the PiP root and your program runs as 8 PiP tasks\&. Note that the 'myprog\&.c' may or may not call any PiP functions\&. Your program can also run as a normal program (not as a PiP task) without using the pip-exec(1) command\&.
.PP
You may write your own PiP programs whcih includes the PiP root programming\&. In this case, your program can run without using the pip-exec(1) command\&.
.PP
If you get the following message when you try to run your program; 
.PP
.nf
PiP-ERR(19673) './myprog' is not PIE

.fi
.PP
.PP
Then this means that the 'myprog' is not compiled by using the pipcc(1) command properly\&. You may check if your program(s) can run as a PiP root and/or PiP task by using the pip-check(1) command (from v2); 
.PP
.nf
$ pip-check a.out
a.out : Root&Task

.fi
.PP
.PP
Above example shows that the 'a\&.out' program can run as a PiP root and PiP tasks\&.
.PP
.IP "\(bu" 2
pips(1) command (from v2)
.PP
You can see how your PiP program is running in realtimme by using the pips(1) command\&.
.PP
.PP
List the PiP tasks via the 'ps' command; 
.PP
.nf
$ pips -l [ COMMAND ]

.fi
.PP
.PP
or, show the activities of PiP tasks via the 'top' command; 
.PP
.nf
$ pips -t [ COMMAND ]

.fi
.PP
.PP
Here \fBCOMMAND\fP is the name (not a path) of PiP program you are running\&.
.PP
Additionally you can kill all of your PiP tasks by using the same pips(1) command; 
.PP
.nf
$ pips -s KILL [ COMMAND ]

.fi
.PP
.PP
.SS "Debugging your PiP programs by the pip-gdb command"
.PP
The following procedure attaches all PiP tasks and PiP root which created those tasks\&. Each PiP 'processes' is treated as a GDB inferior in PiP-gdb\&. 
.PP
.nf
$ pip-gdb
(gdb) attach PID

.fi
.PP
.PP
The attached inferiors can be seen by the following GDB command: 
.PP
.nf
(gdb) info inferiors
  Num  Description              Executable
  4    process 6453 (pip 2)     /somewhere/pip-task-2
  3    process 6452 (pip 1)     /somewhere/pip-task-1
  2    process 6451 (pip 0)     /somewhere/pip-task-0
* 1    process 6450 (pip root)  /somewhere/pip-root

.fi
.PP
.PP
You can select and debug an inferior by the following GDB command: 
.PP
.nf
(gdb) inferior 2
[Switching to inferior 2 [process 6451 (pip 0)] (/somewhere/pip-task-0)]

.fi
.PP
.PP
When an already-attached program calls 'pip_spawn()' and becomes a PiP root task, the newly created PiP child tasks aren't attached automatically, but you can add empty inferiors and then attach the PiP child tasks to the inferiors\&. e\&.g\&. 
.PP
.nf
.... type Control-Z to stop the root task.
^Z
Program received signal SIGTSTP, Stopped (user).

(gdb) add-inferior
Added inferior 2
(gdb) inferior 2
(gdb) attach 1902

(gdb) add-inferior
Added inferior 3
(gdb) inferior 3
(gdb) attach 1903

(gdb) add-inferior
Added inferior 4
(gdb) inferior 4
(gdb) attach 1904

(gdb) info inferiors
  Num  Description              Executable
* 4    process 1904 (pip 2)     /somewhere/pip-task-2
  3    process 1903 (pip 1)     /somewhere/pip-task-1
  2    process 1902 (pip 0)     /somewhere/pip-task-0
  1    process 1897 (pip root)  /somewhere/pip-root

.fi
.PP
.PP
You can attach all relevant PiP tasks by: 
.PP
.nf
$ pip-gdb -p PID-of-your-PiP-program

.fi
.PP
.PP
(from v2)
.PP
If the \fBPIP_GDB_PATH\fP environment is set to the path pointing to PiP-gdb executable file, then PiP-gdb is automatically attached when an excetion signal (SIGSEGV and SIGHUP by default) is delivered\&. The exception signals can also be defined by setting the \fBPIP_GDB_SIGNALS\fP environment\&. Signal names (case insensitive) can be concatenated by the '+' or '-' symbol\&. 'all' is reserved to specify most of the signals\&. For example, 'ALL-TERM' means all signals excepting SIGTERM, another example, 'PIPE+INT' means SIGPIPE and SIGINT\&. If one of the specified or default signals is delivered, then PiP-gdb will be attached automatically\&. The PiP-gdb will show backtrace by default\&. If users specify \fBPIP_GDB_COMMAND\fP that a filename containing some GDB commands, then those GDB commands will be executed by PiP-gdb, instead of backtrace, in batch mode\&. If the \fBPIP_STOP_ON_START\fP environment is set (to any value), then the PiP library delivers SIGSTOP to a spawned PiP task which is about to start user program\&.
.PP
.SH "Mailing List"
.PP
.PP
pip@ml.riken.jp
.PP
.SH "Publications"
.PP
.PP
.SS "Research papers"
.PP
Atsushi Hori, Min Si, Balazs Gerofi, Masamichi Takagi, Jay Dayal, Pavan Balaji, and Yutaka Ishikawa\&. 'Process-in-process: techniques for
practical address-space sharing,' In Proceedings of the 27th International Symposium on High-Performance Parallel and Distributed Computing (HPDC '18)\&. ACM, New York, NY, USA, 131-143\&. DOI: https://doi.org/10.1145/3208040.3208045
.PP
Atsushi Hori, Balazs Gerofi, and Yuataka Ishikawa\&. 'An Implementation
of User-Level Processes using Address Space Sharing,' 2020 IEEE International Parallel and Distributed Processing Symposium Workshops (IPDPSW), New Orleans, LA, USA, 2020, pp\&. 976-984, DOI: https://doi.org/10.1109/IPDPSW50202.2020.00161\&.
.PP
Kaiming Ouyang, Min Si, Atsushi Hori, Zizhong Chen and Pavan Balaji\&. 'CAB-MPI: Exploring Interprocess Work Stealing toward Balanced
MPI Communication,' in SC’20 (to appear)
.PP
.SH "Commands"
.PP
.PP
.IP "\(bu" 2
pipcc
.IP "\(bu" 2
pip-check
.IP "\(bu" 2
pip-exec
.IP "\(bu" 2
pip-man
.IP "\(bu" 2
pip-mode
.IP "\(bu" 2
pips
.IP "\(bu" 2
printpipmode
.PP
.PP
.SH "Functions"
.PP
.PP
.IP "\(bu" 2
pip_abort
.IP "\(bu" 2
pip_barrier_fin
.IP "\(bu" 2
pip_barrier_init
.IP "\(bu" 2
pip_barrier_wait
.IP "\(bu" 2
pip_blt_spawn
.IP "\(bu" 2
pip_couple
.IP "\(bu" 2
pip_decouple
.IP "\(bu" 2
pip_dequeue_and_resume
.IP "\(bu" 2
pip_dequeue_and_resume_N
.IP "\(bu" 2
pip_dequeue_and_resume_N_nolock
.IP "\(bu" 2
pip_dequeue_and_resume_nolock
.IP "\(bu" 2
pip_exit
.IP "\(bu" 2
pip_export
.IP "\(bu" 2
pip_fin
.IP "\(bu" 2
pip_get_aux
.IP "\(bu" 2
pip_get_mode
.IP "\(bu" 2
pip_get_mode_str
.IP "\(bu" 2
pip_get_ntasks
.IP "\(bu" 2
pip_get_pipid
.IP "\(bu" 2
pip_get_sched_domain
.IP "\(bu" 2
pip_get_system_id
.IP "\(bu" 2
pip_get_task_by_pipid
.IP "\(bu" 2
pip_get_task_pipid
.IP "\(bu" 2
pip_import
.IP "\(bu" 2
pip_init
.IP "\(bu" 2
pip_isa_root
.IP "\(bu" 2
pip_isa_task
.IP "\(bu" 2
pip_is_initialized
.IP "\(bu" 2
pip_is_shared_fd
.IP "\(bu" 2
pip_is_threaded
.IP "\(bu" 2
pip_kill
.IP "\(bu" 2
pip_kill_all_tasks
.IP "\(bu" 2
pip_mutex_fin
.IP "\(bu" 2
pip_mutex_init
.IP "\(bu" 2
pip_mutex_lock
.IP "\(bu" 2
pip_mutex_unlock
.IP "\(bu" 2
pip_named_export
.IP "\(bu" 2
pip_named_import
.IP "\(bu" 2
pip_named_tryimport
.IP "\(bu" 2
pip_set_aux
.IP "\(bu" 2
pip_sigmask
.IP "\(bu" 2
pip_signal_wait
.IP "\(bu" 2
pip_spawn
.IP "\(bu" 2
pip_spawn_from_func
.IP "\(bu" 2
pip_spawn_from_main
.IP "\(bu" 2
pip_spawn_hook
.IP "\(bu" 2
pip_suspend_and_enqueue
.IP "\(bu" 2
pip_suspend_and_enqueue_nolock
.IP "\(bu" 2
pip_task_queue_count
.IP "\(bu" 2
pip_task_queue_dequeue
.IP "\(bu" 2
pip_task_queue_describe
.IP "\(bu" 2
pip_task_queue_enqueue
.IP "\(bu" 2
pip_task_queue_fin
.IP "\(bu" 2
pip_task_queue_init
.IP "\(bu" 2
pip_task_queue_isempty
.IP "\(bu" 2
pip_task_queue_lock
.IP "\(bu" 2
pip_task_queue_trylock
.IP "\(bu" 2
pip_task_queue_unlock
.IP "\(bu" 2
pip_task_self
.IP "\(bu" 2
pip_task_spawn
.IP "\(bu" 2
pip_trywait
.IP "\(bu" 2
pip_trywait_any
.IP "\(bu" 2
pip_wait
.IP "\(bu" 2
pip_wait_any
.IP "\(bu" 2
pip_yield
.IP "\(bu" 2
pip_yield_to
.PP
.PP
.SH "Author"
.PP
.PP
Atsushi Hori
.br
 Riken Center for Commputational Science (R-CCS)
.br
 Japan
.br
 
